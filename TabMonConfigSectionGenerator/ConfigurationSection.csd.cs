//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TabMon.Config
{
    
    
    /// <summary>
    /// The TabMonConfig Configuration Section.
    /// </summary>
    public partial class TabMonConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the TabMonConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TabMonConfigSectionName = "TabMonConfig";
        
        /// <summary>
        /// The XML path of the TabMonConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TabMonConfigSectionPath = "TabMonConfig";
        
        /// <summary>
        /// Gets the TabMonConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::TabMon.Config.TabMonConfig Instance
        {
            get
            {
                return ((global::TabMon.Config.TabMonConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::TabMon.Config.TabMonConfig.TabMonConfigSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.TabMonConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::TabMon.Config.TabMonConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DatabasePropertyName = "Database";
        
        /// <summary>
        /// Gets or sets contains configuration information for the results database.  Only required if OutputMode is "DB".
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains configuration information for the results database.  Only required if Ou" +
            "tputMode is \"DB\".")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.TabMonConfig.DatabasePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.Database Database
        {
            get
            {
                return ((global::TabMon.Config.Database)(base[global::TabMon.Config.TabMonConfig.DatabasePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.TabMonConfig.DatabasePropertyName] = value;
            }
        }
        #endregion
        
        #region Clusters Property
        /// <summary>
        /// The XML name of the <see cref="Clusters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClustersPropertyName = "Clusters";
        
        /// <summary>
        /// Gets or sets contains definitions of which machines to monitor and their logical clustering.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains definitions of which machines to monitor and their logical clustering.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.TabMonConfig.ClustersPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.Clusters Clusters
        {
            get
            {
                return ((global::TabMon.Config.Clusters)(base[global::TabMon.Config.TabMonConfig.ClustersPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.TabMonConfig.ClustersPropertyName] = value;
            }
        }
        #endregion
        
        #region PollInterval Property
        /// <summary>
        /// The XML name of the <see cref="PollInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PollIntervalPropertyName = "PollInterval";
        
        /// <summary>
        /// Gets or sets contains information about the polling frequency.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains information about the polling frequency.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.TabMonConfig.PollIntervalPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.PollInterval PollInterval
        {
            get
            {
                return ((global::TabMon.Config.PollInterval)(base[global::TabMon.Config.TabMonConfig.PollIntervalPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.TabMonConfig.PollIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region OutputMode Property
        /// <summary>
        /// The XML name of the <see cref="OutputMode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string OutputModePropertyName = "OutputMode";
        
        /// <summary>
        /// Gets or sets contains information about the result output mode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains information about the result output mode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.TabMonConfig.OutputModePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.OutputMode OutputMode
        {
            get
            {
                return ((global::TabMon.Config.OutputMode)(base[global::TabMon.Config.TabMonConfig.OutputModePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.TabMonConfig.OutputModePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Represents a logical grouping of hosts.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::TabMon.Config.Host), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::TabMon.Config.Cluster.HostPropertyName)]
    public partial class Cluster : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::TabMon.Config.Host"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HostPropertyName = "Host";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::TabMon.Config.Cluster.HostPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::TabMon.Config.Cluster.HostPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::TabMon.Config.Host)(element)).Address;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::TabMon.Config.Host"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::TabMon.Config.Host"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::TabMon.Config.Host();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Host"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Host"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Host this[int index]
        {
            get
            {
                return ((global::TabMon.Config.Host)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Host"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::TabMon.Config.Host"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Host this[object address]
        {
            get
            {
                return ((global::TabMon.Config.Host)(base.BaseGet(address)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::TabMon.Config.Host"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Host">The <see cref="global::TabMon.Config.Host"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::TabMon.Config.Host Host)
        {
            base.BaseAdd(Host);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::TabMon.Config.Host"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Host">The <see cref="global::TabMon.Config.Host"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::TabMon.Config.Host Host)
        {
            base.BaseRemove(this.GetElementKey(Host));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Host"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Host"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Host GetItemAt(int index)
        {
            return ((global::TabMon.Config.Host)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Host"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::TabMon.Config.Host"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Host GetItemByKey(string address)
        {
            return ((global::TabMon.Config.Host)(base.BaseGet(((object)(address)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the cluster.  Used to logically group multiple hosts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the cluster.  Used to logically group multiple hosts.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Cluster.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false, DefaultValue="Primary")]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Cluster.NamePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Cluster.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains configuration information for the results database.  Only required if OutputMode is "DB".
    /// </summary>
    public partial class Database : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type of database that this is.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The type of database that this is.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="Postgres")]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Database.TypePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the instantiated database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the instantiated database.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.NamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="TabMon")]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Database.NamePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ServerPropertyName = "Server";
        
        /// <summary>
        /// Gets or sets contains information about the database server location.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains information about the database server location.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.ServerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.Server Server
        {
            get
            {
                return ((global::TabMon.Config.Server)(base[global::TabMon.Config.Database.ServerPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region User Property
        /// <summary>
        /// The XML name of the <see cref="User"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string UserPropertyName = "User";
        
        /// <summary>
        /// Gets or sets contains information about the database user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains information about the database user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.UserPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.User User
        {
            get
            {
                return ((global::TabMon.Config.User)(base[global::TabMon.Config.Database.UserPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.UserPropertyName] = value;
            }
        }
        #endregion
        
        #region Table Property
        /// <summary>
        /// The XML name of the <see cref="Table"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string TablePropertyName = "Table";
        
        /// <summary>
        /// Gets or sets contains information about the results table.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains information about the results table.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.TablePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.Table Table
        {
            get
            {
                return ((global::TabMon.Config.Table)(base[global::TabMon.Config.Database.TablePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.TablePropertyName] = value;
            }
        }
        #endregion
        
        #region Indexes Property
        /// <summary>
        /// The XML name of the <see cref="Indexes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string IndexesPropertyName = "Indexes";
        
        /// <summary>
        /// Gets or sets contains columns to be indexed upon table creation.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Contains columns to be indexed upon table creation.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.IndexesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.Config.Indexes Indexes
        {
            get
            {
                return ((global::TabMon.Config.Indexes)(base[global::TabMon.Config.Database.IndexesPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.IndexesPropertyName] = value;
            }
        }
        #endregion
        
        #region PurgeOldData Property
        /// <summary>
        /// The XML name of the <see cref="PurgeOldData"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PurgeOldDataPropertyName = "PurgeOldData";
        
        /// <summary>
        /// Gets or sets the PurgeOldData.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The PurgeOldData.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Database.PurgeOldDataPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::TabMon.PurgeOldData PurgeOldData
        {
            get
            {
                return ((global::TabMon.PurgeOldData)(base[global::TabMon.Config.Database.PurgeOldDataPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Database.PurgeOldDataPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Represents an individual host.
    /// </summary>
    public partial class Host : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ComputerName Property
        /// <summary>
        /// The XML name of the <see cref="ComputerName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ComputerNamePropertyName = "computerName";
        
        /// <summary>
        /// Gets or sets the computer name of the host to monitor.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The computer name of the host to monitor.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Host.ComputerNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="YOURCOMPUTERNAME")]
        public virtual string ComputerName
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Host.ComputerNamePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Host.ComputerNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Address Property
        /// <summary>
        /// The XML name of the <see cref="Address"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AddressPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the hostname or IP address of the host to monitor.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The hostname or IP address of the host to monitor.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Host.AddressPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false, DefaultValue="localhost")]
        public virtual string Address
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Host.AddressPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Host.AddressPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains information about the database server location.
    /// </summary>
    public partial class Server : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the hostname or IP address of the database server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The hostname or IP address of the database server.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Server.HostPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="localhost")]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Server.HostPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Server.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the port number of the database server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The port number of the database server.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Server.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=5432)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::TabMon.Config.Server.PortPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Server.PortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains information about the database user.
    /// </summary>
    public partial class User : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Login Property
        /// <summary>
        /// The XML name of the <see cref="Login"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LoginPropertyName = "login";
        
        /// <summary>
        /// Gets or sets the login for the database user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The login for the database user.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.User.LoginPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="tabmon")]
        public virtual string Login
        {
            get
            {
                return ((string)(base[global::TabMon.Config.User.LoginPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.User.LoginPropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the password of the database user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The password of the database user.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.User.PasswordPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="password")]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::TabMon.Config.User.PasswordPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.User.PasswordPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains information about the results table.
    /// </summary>
    public partial class Table : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of the database table to write results to.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The name of the database table to write results to.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Table.NamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="countersamples")]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Table.NamePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Table.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains information about the polling frequency.
    /// </summary>
    public partial class PollInterval : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the interval between polling cycles, in seconds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The interval between polling cycles, in seconds.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.PollInterval.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=30)]
        public virtual int Value
        {
            get
            {
                return ((int)(base[global::TabMon.Config.PollInterval.ValuePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.PollInterval.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains information about the result output mode.
    /// </summary>
    public partial class OutputMode : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the output mode.  "CSV" for local flat file output, or "DB" for database output.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The output mode.  \"CSV\" for local flat file output, or \"DB\" for database output.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters="", MaxLength=2147483647, MinLength=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.OutputMode.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="db")]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::TabMon.Config.OutputMode.ValuePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.OutputMode.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains definitions of which machines to monitor and their logical clustering.  Each cluster may contain multiple hosts.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::TabMon.Config.Cluster), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::TabMon.Config.Clusters.ClusterPropertyName)]
    public partial class Clusters : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::TabMon.Config.Cluster"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClusterPropertyName = "Cluster";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::TabMon.Config.Clusters.ClusterPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::TabMon.Config.Clusters.ClusterPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::TabMon.Config.Cluster)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::TabMon.Config.Cluster"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::TabMon.Config.Cluster"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::TabMon.Config.Cluster();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Cluster"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Cluster this[int index]
        {
            get
            {
                return ((global::TabMon.Config.Cluster)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Cluster"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::TabMon.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Cluster this[object name]
        {
            get
            {
                return ((global::TabMon.Config.Cluster)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::TabMon.Config.Cluster"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Cluster">The <see cref="global::TabMon.Config.Cluster"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::TabMon.Config.Cluster Cluster)
        {
            base.BaseAdd(Cluster);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::TabMon.Config.Cluster"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Cluster">The <see cref="global::TabMon.Config.Cluster"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::TabMon.Config.Cluster Cluster)
        {
            base.BaseRemove(this.GetElementKey(Cluster));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Cluster"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Cluster GetItemAt(int index)
        {
            return ((global::TabMon.Config.Cluster)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Cluster"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::TabMon.Config.Cluster"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Cluster GetItemByKey(string name)
        {
            return ((global::TabMon.Config.Cluster)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Contains columns to be indexed upon table creation.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::TabMon.Config.Index), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::TabMon.Config.Indexes.IndexPropertyName)]
    public partial class Indexes : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::TabMon.Config.Index"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string IndexPropertyName = "Index";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::TabMon.Config.Indexes.IndexPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::TabMon.Config.Indexes.IndexPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::TabMon.Config.Index)(element)).Column;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::TabMon.Config.Index"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::TabMon.Config.Index"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::TabMon.Config.Index();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Index"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Index"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Index this[int index]
        {
            get
            {
                return ((global::TabMon.Config.Index)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Index"/> with the specified key.
        /// </summary>
        /// <param name="column">The key of the <see cref="global::TabMon.Config.Index"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Index this[object column]
        {
            get
            {
                return ((global::TabMon.Config.Index)(base.BaseGet(column)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::TabMon.Config.Index"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Index">The <see cref="global::TabMon.Config.Index"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::TabMon.Config.Index Index)
        {
            base.BaseAdd(Index);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::TabMon.Config.Index"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="Index">The <see cref="global::TabMon.Config.Index"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::TabMon.Config.Index Index)
        {
            base.BaseRemove(this.GetElementKey(Index));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Index"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::TabMon.Config.Index"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Index GetItemAt(int index)
        {
            return ((global::TabMon.Config.Index)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::TabMon.Config.Index"/> with the specified key.
        /// </summary>
        /// <param name="column">The key of the <see cref="global::TabMon.Config.Index"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::TabMon.Config.Index GetItemByKey(string column)
        {
            return ((global::TabMon.Config.Index)(base.BaseGet(((object)(column)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Generate Property
        /// <summary>
        /// The XML name of the <see cref="Generate"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GeneratePropertyName = "generate";
        
        /// <summary>
        /// Gets or sets whether TabMon will generate and validate indexes upon startup.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Whether TabMon will generate and validate indexes upon startup.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Indexes.GeneratePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool Generate
        {
            get
            {
                return ((bool)(base[global::TabMon.Config.Indexes.GeneratePropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Indexes.GeneratePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon.Config
{
    
    
    /// <summary>
    /// Represents an individual index.
    /// </summary>
    public partial class Index : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Column Property
        /// <summary>
        /// The XML name of the <see cref="Column"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ColumnPropertyName = "column";
        
        /// <summary>
        /// Gets or sets the column name to be indexed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The column name to be indexed.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Index.ColumnPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false, DefaultValue="")]
        public virtual string Column
        {
            get
            {
                return ((string)(base[global::TabMon.Config.Index.ColumnPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Index.ColumnPropertyName] = value;
            }
        }
        #endregion
        
        #region Clustered Property
        /// <summary>
        /// The XML name of the <see cref="Clustered"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClusteredPropertyName = "clustered";
        
        /// <summary>
        /// Gets or sets whether the index is clustered or not.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Whether the index is clustered or not.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.Config.Index.ClusteredPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool Clustered
        {
            get
            {
                return ((bool)(base[global::TabMon.Config.Index.ClusteredPropertyName]));
            }
            set
            {
                base[global::TabMon.Config.Index.ClusteredPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace TabMon
{
    
    
    /// <summary>
    /// The PurgeOldData Configuration Element.
    /// </summary>
    public partial class PurgeOldData : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets whether TabMon will purge data after a certain time.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Whether TabMon will purge data after a certain time.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.PurgeOldData.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::TabMon.PurgeOldData.EnabledPropertyName]));
            }
            set
            {
                base[global::TabMon.PurgeOldData.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region ThresholdDays Property
        /// <summary>
        /// The XML name of the <see cref="ThresholdDays"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ThresholdDaysPropertyName = "thresholdDays";
        
        /// <summary>
        /// Gets or sets the age in days that a row has to exceed  before it is pruged.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The age in days that a row has to exceed  before it is pruged.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=1)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::TabMon.PurgeOldData.ThresholdDaysPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=30)]
        public virtual int ThresholdDays
        {
            get
            {
                return ((int)(base[global::TabMon.PurgeOldData.ThresholdDaysPropertyName]));
            }
            set
            {
                base[global::TabMon.PurgeOldData.ThresholdDaysPropertyName] = value;
            }
        }
        #endregion
    }
}
